@page "/scheduler"
@using System.Globalization
@inject Services.IVoteServcie voteService

<RadzenScheduler @ref=@scheduler SlotRender=@OnSlotRender TItem="Appointment" Data=@appointments StartProperty="Start" EndProperty="End"
                 TextProperty="Text" SelectedIndex="2"
                 AppointmentRender=@OnAppointmentRender>
    <RadzenDayView />
    <RadzenWeekView />
    <RadzenMonthView />
    <RadzenYearView />
</RadzenScheduler>

@if (vote != null)
{
    <RadzenCard Style="justify-content:center">
        <RadzenLabel Text="Vote lịch đá bóng"></RadzenLabel>
        @foreach (var choice in choices)
        {
            <RadzenStack Orientation="Orientation.Horizontal">
                <RadzenCheckBox @bind-Value=@choice.ChoiceResponse Name="CheckBox" />
                <RadzenLabel Text=@choice.Name Component="Checkbox" Style="margin-left: 8px; vertical-align: middle;" />
            </RadzenStack>
        }
        <RadzenStack JustifyContent="JustifyContent.Center">
            <RadzenButton Click=@(args => Vote()) Text="Vote" ButtonStyle="ButtonStyle.Primary"></RadzenButton>
        </RadzenStack>
        
    </RadzenCard>
}

<style>
    .rz-scheduler-nav-views {
        display: none;
    }
</style>

@code {
    IEnumerable<int> values = new int[] { };
    RadzenScheduler<Appointment>? scheduler;

    Document vote;

    IList<Appointment> appointments = new List<Appointment>();

    List<Document> choices = new List<Document>();

    protected override async Task OnInitializedAsync()
    {
        vote = await voteService.GetVote(Global.Infomation);

        foreach (var choice in vote.Choices)
        {
            if (choice.Date != null)
            {
                var date = (DateTime)choice.Date;
                var appointment = new Appointment { Start = date, End = date.AddHours(1).AddMinutes(30), Text = "Vote" };
                appointments.Add(appointment);
                choices.Add(new Document { ObjectId = Guid.NewGuid().ToString(), Name = choice.Name, ChoiceResponse = true });
            }
        }

        var x = vote.ToString();
        StateHasChanged();
        await scheduler.Reload();
    }

    void OnSlotRender(SchedulerSlotRenderEventArgs args)
    {
        if (args.View.Text == "Month" && args.Start.Date == DateTime.Today)
        {
            args.Attributes["style"] = "background: rgba(255,220,40,.2);";
        }
    }

    void OnAppointmentRender(SchedulerAppointmentRenderEventArgs<Appointment> args)
    {
        if (args.Data.Text == "Vote")
        {
            args.Attributes["style"] = "background: red";
        }
    }

    void Change(bool e)
    {
        Document doc = new Document();
        doc.Choices = choices;

        var x = doc.ToString();

        StateHasChanged();
    }

    void Vote()
    {
        Document doc = new Document();
        doc.Choices = choices;

        doc.Token = Global.Infomation.Token;


    }
}